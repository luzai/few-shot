#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import os
import sys
import subprocess
from importlib import import_module

import h5py
from six.moves import zip

parrots_home = os.environ.get('PARROTS_HOME')
if parrots_home:
    sys.path.append(os.path.join(parrots_home, 'parrots/python'))

from parrots.dnn import Model


def load_model(model_file):
    if model_file.endswith('.yaml'):
        with open(model_file, 'r') as fin:
            model_text = fin.read()
        model = Model.from_yaml_text(model_text)
    elif model_file.endswith('.jl'):
        model_text = subprocess.check_output(['julia', model_file])
        model = Model.from_yaml_text(model_text)
    elif model_file.endswith('.py'):
        loc = model_file.rfind('/')
        if loc != -1:
            mod_path = os.path.abspath(model_file[:loc])
            if mod_path not in sys.path:
                sys.path.append(mod_path)
        mod_name = model_file[loc + 1:-3]
        model_module = import_module(mod_name)
        model = model_module.create_model()
    else:
        raise KeyError('Unrecognized model file type.')
    if not model.is_sealed:
        model.seal()
    return model


def validate_models(model1, model2):
    if model1.num_layers != model2.num_layers:
        raise ValueError(
            'Two models have different number of layers: {} vs {}'.format(
                model1.num_layers, model2.num_layers))
    elif model1.num_params != model2.num_params:
        raise ValueError(
            'Two models have different number of params: {} vs {}'.format(
                model1.num_params, model2.num_params))
    succ = True
    for layer1, layer2 in zip(model1.layer_entries(), model2.layer_entries()):
        try:
            assert layer1.typename == layer2.typename or (
                layer1.typename in ['InnerProduct', 'FullyConnected'] and
                layer2.typename in ['InnerProduct', 'FullyConnected'])
            assert layer1.num_bottoms == layer2.num_bottoms
            assert layer1.num_tops == layer2.num_tops
            assert layer1.attrs == layer2.attrs
        except:
            print('old >>>>>>>>>>>>>>>>>>>>>>>>')
            print('Layer id: {}, type: {}, attrs: {}'.format(
                layer1.id, layer1.typename, layer1.attrs))
            print('============================')
            print('Layer id: {}, type: {}, attrs: {}'.format(
                layer2.id, layer2.typename, layer2.attrs))
            print('new <<<<<<<<<<<<<<<<<<<<<<<<\n')
            succ = False
    if not succ:
        raise ValueError(
            'Two models have different structures, see above details')


def main():
    parser = argparse.ArgumentParser(
        description='Session or workdir upgrading tool')
    parser.add_argument(
        'old_model', metavar='old_model.yaml', help='old model file path')
    parser.add_argument(
        'old_weights',
        metavar='old_weights.parrots',
        help='old weight file path')
    parser.add_argument(
        'new_model', metavar='new_model.yaml', help='old model file path')
    parser.add_argument(
        'new_weights',
        metavar='new_weights.parrots',
        help='new model file path')
    parser.add_argument(
        '--keep_grad', action='store_true', help='keep gradient and momentum')
    parser.add_argument(
        '--no_check',
        action='store_true',
        help='do not check if two models have the same structure')
    args = parser.parse_args()
    old_model = load_model(args.old_model)
    new_model = load_model(args.new_model)
    if not args.no_check:
        validate_models(old_model, new_model)
    fin = h5py.File(args.old_weights, 'r')
    fout = h5py.File(args.new_weights, 'w')
    for old_id, new_id in zip(old_model.params(), new_model.params()):
        fout[new_id + '@value'] = fin[old_id + '@value'][...]
        if args.keep_grad:
            for suffix in ['@grad', '@momentum']:
                if old_id + suffix in fin:
                    fout[new_id + suffix] = fin[old_id + suffix][...]
    fin.close()
    fout.close()


if __name__ == '__main__':
    main()
